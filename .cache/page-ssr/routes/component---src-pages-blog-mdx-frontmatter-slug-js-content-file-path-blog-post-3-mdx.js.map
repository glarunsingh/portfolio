{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-blog-post-3-mdx.js","mappings":"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","sources":["webpack://elegant-portfolio/./blog/post-3.mdx","webpack://elegant-portfolio/./src/pages/blog/{mdx.frontmatter__slug}.js","webpack://elegant-portfolio/./src/components/seo.js","webpack://elegant-portfolio/./src/hooks/use-site-metadata.jsx","webpack://elegant-portfolio/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.p, null, \"Blog post n°3. Write your post using Markdown syntax.\");\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"C:/Users/JANU/OneDrive/Documents/GitHub/portfolio/blog/post-3.mdx\";\nimport * as React from 'react';\nimport {graphql} from 'gatsby';\nimport Seo from '../../components/seo';\nconst BlogPost = ({data, children}) => {\n  return React.createElement(\"div\", null, React.createElement(\"h1\", {\n    className: \"text-3xl font-bold mb-2\"\n  }, data.mdx.frontmatter.title), React.createElement(\"p\", {\n    className: \"mb-4\"\n  }, data.mdx.frontmatter.date), children);\n};\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: {eq: $id}) {\n      frontmatter {\n        title\n        date(formatString: \"MMMM D, YYYY\")\n        description\n        slug\n      }\n    }\n  }\n`;\nexport const Head = ({data}) => React.createElement(Seo, {\n  title: data.mdx.frontmatter.title,\n  description: data.mdx.frontmatter.description,\n  pathname: `/blog/${data.mdx.frontmatter.slug}`\n});\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import * as React from 'react'\r\nimport { useSiteMetadata } from \"../hooks/use-site-metadata\";\r\n\r\nconst Seo = ({ title, description, pathname, children }) => {\r\n\r\n  const { title: siteTitle, description: siteDescription, siteUrl } = useSiteMetadata()\r\n\r\n  const seo = {\r\n    title: title,\r\n    description: description || siteDescription,\r\n    url: `${siteUrl}${pathname || ``}`,\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <title>{seo.title} | {siteTitle}</title>\r\n      <meta name=\"description\" content={seo.description} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo","import { graphql, useStaticQuery } from \"gatsby\"\r\n\r\nexport const useSiteMetadata = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n          description\r\n          siteUrl\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return data.site.siteMetadata\r\n}","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["useMDXComponents","_provideComponents","React","_createMdxContent","props","_components","Object","assign","p","components","createElement","MDXContent","wrapper","MDXLayout","GATSBY_COMPILED_MDX","Seo","BlogPost","data","children","className","mdx","frontmatter","title","date","query","Head","description","pathname","slug","GatsbyMDXWrapper","useSiteMetadata","siteTitle","siteDescription","siteUrl","seo","url","Fragment","name","content","staticQueryData","site","siteMetadata"],"sourceRoot":""}